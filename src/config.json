{
    "alias_barrier_modules": [
        "Src__Environment"
    ],
    "constant_warning": false,
    "error_category_blacklist": [
        "side_effect"
    ],
    "escape_value": [
        "a",
        "acc",
        "accu",
        "alloc",
        "array",
        "b",
        "baking_rights_query",
        "big_map_get_all_query",
        "case",
        "cell",
        "chest",
        "chest_key",
        "config",
        "cons",
        "context",
        "dand",
        "descr",
        "diff",
        "elt",
        "endorsing_rights_query",
        "eq",
        "error",
        "field",
        "fixed",
        "fp",
        "frozen_balance",
        "full",
        "gas_counter_status",
        "handler",
        "has_big_map",
        "has_lazy_storage",
        "has_tickets",
        "hash",
        "history",
        "index",
        "info",
        "init",
        "integral",
        "internal_gas",
        "json",
        "json_schema",
        "judgement",
        "k",
        "key",
        "key_maker",
        "kind",
        "kinfo",
        "kinstr_rewritek",
        "kinstr_traverse",
        "l",
        "lazy_expr",
        "level_query",
        "list_query",
        "loc",
        "local_gas_counter",
        "may_saturate",
        "mul_safe",
        "namespace",
        "node",
        "nonce",
        "normalize_types_query",
        "outdated_context",
        "query",
        "p",
        "parametric",
        "r",
        "range",
        "raw",
        "ret",
        "root",
        "round_and_offset",
        "seed",
        "sequence",
        "size",
        "slot_range",
        "snapshot",
        "stack",
        "stack_ty_traverse",
        "state",
        "storage",
        "storage_error",
        "t",
        "tc_context",
        "toplevel",
        "trace",
        "tree",
        "tt",
        "ty_metadata",
        "ty_traverse",
        "type_logger",
        "value",
        "value_traverse",
        "void"
    ],
    "monadic_lets": [
        [
            "Error_monad.op_gtgteq",
            "let"
        ],
        [
            "Error_monad.op_gtgteqquestion",
            "let?"
        ],
        [
            "Error_monad.op_gtgtquestion",
            "let?"
        ],
        [
            "Lwt_tzresult_syntax.op_letstar",
            "let?"
        ]
    ],
    "monadic_let_returns": [
        [
            "Error_monad.op_gtpipeeq",
            "let",
            ""
        ],
        [
            "Error_monad.op_gtpipeeqquestion",
            "let?",
            "return?"
        ],
        [
            "Error_monad.op_gtpipequestion",
            "let?",
            "return?"
        ]
    ],
    "monadic_returns": [
        [
            "Lwt._return",
            ""
        ],
        [
            "Error_monad._return",
            "return?"
        ],
        [
            "Error_monad.ok",
            "return?"
        ]
    ],
    "monadic_return_lets": [
        [
            "Error_monad.op_gtgtquestioneq",
            "",
            "let?"
        ]
    ],
    "operator_infix": [
        [
            "Compare.Int.op_eq",
            "=i"
        ],
        [
            "Compare.Int.op_ltgt",
            "<>i"
        ],
        [
            "Compare.Int.op_lteq",
            "<=i"
        ],
        [
            "Compare.Int.op_lt",
            "<i"
        ],
        [
            "Compare.Int.op_gteq",
            ">=i"
        ],
        [
            "Compare.Int.op_gt",
            ">i"
        ],
        [
            "Compare.Int32.(Compare.S.op_eq)",
            "=i32"
        ],
        [
            "Compare.Int32.(Compare.S.op_ltgt)",
            "<>i32"
        ],
        [
            "Compare.Int32.(Compare.S.op_lteq)",
            "<=i32"
        ],
        [
            "Compare.Int32.(Compare.S.op_lt)",
            "<i32"
        ],
        [
            "Compare.Int32.(Compare.S.op_gteq)",
            ">=i32"
        ],
        [
            "Compare.Int32.(Compare.S.op_gt)",
            ">i32"
        ],
        [
            "Compare.Int64.(Compare.S.op_eq)",
            "=i64"
        ],
        [
            "Compare.Int64.(Compare.S.op_ltgt)",
            "<>i64"
        ],
        [
            "Compare.Int64.(Compare.S.op_lteq)",
            "<=i64"
        ],
        [
            "Compare.Int64.(Compare.S.op_lt)",
            "<i64"
        ],
        [
            "Compare.Int64.(Compare.S.op_gteq)",
            ">=i64"
        ],
        [
            "Compare.Int64.(Compare.S.op_gt)",
            ">i64"
        ],
        [
            "Compare.Z.(Compare.S.op_eq)",
            "=Z"
        ],
        [
            "Compare.Z.(Compare.S.op_ltgt)",
            "<>Z"
        ],
        [
            "Compare.Z.(Compare.S.op_lteq)",
            "<=Z"
        ],
        [
            "Compare.Z.(Compare.S.op_lt)",
            "<Z"
        ],
        [
            "Compare.Z.(Compare.S.op_gteq)",
            ">=Z"
        ],
        [
            "Compare.Z.(Compare.S.op_gt)",
            ">Z"
        ],
        [
            "Int32.add",
            "+i32"
        ],
        [
            "Int32.sub",
            "-i32"
        ],
        [
            "Int32.mul",
            "*i32"
        ],
        [
            "Int32.div",
            "/i32"
        ],
        [
            "Int64.add",
            "+i64"
        ],
        [
            "Int64.sub",
            "-i64"
        ],
        [
            "Int64.mul",
            "*i64"
        ],
        [
            "Int64.div",
            "/i64"
        ],
        [
            "Pervasives.op_andand",
            "&&"
        ],
        [
            "Pervasives.op_pipepipe",
            "||"
        ],
        [
            "Pervasives.op_plus",
            "+i"
        ],
        [
            "Pervasives.op_minus",
            "-i"
        ],
        [
            "Pervasives.op_star",
            "*i"
        ],
        [
            "Pervasives.op_div",
            "/i"
        ],
        [
            "Z.add",
            "+Z"
        ],
        [
            "Z.sub",
            "-Z"
        ],
        [
            "Z.mul",
            "*Z"
        ],
        [
            "Z.div",
            "/Z"
        ],
        [
            "Z_syntax.op_plus",
            "+Z"
        ],
        [
            "Z_syntax.op_star",
            "*Z"
        ]
    ],
    "renaming_rules": [
        [
            "Error_monad.tzresult",
            "M?"
        ],
        [
            "Lwt.t",
            ""
        ],
        [
            "Failure",
            "Failure"
        ],
        [
            "Ok",
            "Ok"
        ]
    ],
    "renaming_type_constructor": [
        [
            "Compare.Char.(Compare.S.t)",
            "ascii"
        ],
        [
            "Compare.Int.(Compare.S.t)",
            "int"
        ],
        [
            "Compare.Int32.(Compare.S.t)",
            "int32"
        ],
        [
            "Compare.Int64.(Compare.S.t)",
            "int64"
        ],
        [
            "Compare.String.(Compare.S.t)",
            "string"
        ],
        [
            "Compare.Z.(Compare.S.t)",
            "Z.t"
        ]
    ],
    "variant_constructors": [
        [
            "Lt",
            "Context.Lt"
        ],
        [
            "Le",
            "Context.Le"
        ],
        [
            "Eq",
            "Context.Eq"
        ],
        [
            "Ge",
            "Context.Ge"
        ],
        [
            "Gt",
            "Context.Gt"
        ],
        [
            "Tree",
            "Context.Kind.Tree"
        ],
        [
            "Value",
            "Context.Kind.Value"
        ],
        [
            "Dir",
            "Context.Dir"
        ],
        [
            "Key",
            "Context.Key"
        ],
        [
            "Hex",
            "Hex.Hex"
        ],
        [
            "Branch",
            "Error_monad.Branch"
        ],
        [
            "Outdated",
            "Error_monad.Outdated"
        ],
        [
            "Permanent",
            "Error_monad.Permanent"
        ],
        [
            "Temporary",
            "Error_monad.Temporary"
        ],
        [
            "Node",
            "Context.KNode"
        ],
        [
            "Value",
            "Context.KValue"
        ]
    ],
    "variant_types": [
        [
            "Lt",
            "Context.depth"
        ],
        [
            "Le",
            "Context.depth"
        ],
        [
            "Eq",
            "Context.depth"
        ],
        [
            "Ge",
            "Context.depth"
        ],
        [
            "Gt",
            "Context.depth"
        ],
        [
            "Tree",
            "Context.Kind.t"
        ],
        [
            "Value",
            "Context.Kind.t"
        ],
        [
            "Dir",
            "Context.key_or_dir"
        ],
        [
            "Key",
            "Context.key_or_dir"
        ]
    ],
    "require": [
        [
            "Src",
            "Src"
        ],
        [
            "Stdlib",
            "Src"
        ]
    ]
}